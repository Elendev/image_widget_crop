<?php

/**
 * @file
 * Contains image_widget_crop.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Drupal\image_widget_crop\Plugin\Field\FieldWidget\ImageCropWidget;

/**
 * Implements hook_help().
 */
function image_widget_crop_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.image_widget_crop':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implement CROP API into the fields image');
      $output .= '<h3>' . t('Try module') . '</h3>';
      $output .= '<p>' . t('You can Test ImageWidgetCrop in action directly with the sub-module, "ImageWidgetCrop example" to test differents usecase of this module');
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function image_widget_cropfield_widget_info_alter(array &$info) {
  // Let a new field type re-use an existing widget.
  $info['image_image']['field_types'][] = 'image_widget_crop';
}

/**
 * Implements hook_entity_presave().
 */
function image_widget_crop_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if (isset($entity) && $entity instanceof Drupal\Core\Entity\FieldableEntityInterface) {
    // Loop all fields of the saved entity.
    foreach ($entity->getFields() as $entity_fields) {
      // If current field is FileField and use imageWidgetCrop.
      if ($entity_fields instanceof FileFieldItemList && isset($entity_fields->crop_preview_wrapper)) {

        /** @var \Drupal\image_widget_crop\ImageWidgetCropManager $image_widget_crop_manager */
        $image_widget_crop_manager = \Drupal::service('image_widget_crop.manager');

        /* First loop to get each elements independently in the field values.
        Required if the image field cardinality > 1. */
        foreach ($entity_fields->getValue() as $crop_element) {
          /* Parse all value of a crop_preview_wrapper element and get,
          properties associate with her CropType. */
          foreach ($crop_element['crop_preview_wrapper'] as $crop_type_name => $properties) {
            /** @var \Drupal\crop\Entity\CropType $crop_type */
            $crop_type = \Drupal::entityTypeManager()
              ->getStorage('crop_type')
              ->loadByProperties(['id' => $crop_type_name]);

            $properties['values'] = &$properties['crop_container']['values'];

            // If the crop type needed is disabled or delete.
            if (!isset($crop_type[$crop_type_name]) || empty($crop_type[$crop_type_name])) {
              drupal_set_message(t("The CropType ('@cropType') is not active or not defined. Please verify configuration of image style or ImageWidgetCrop formatter configuration", ['@cropType' => $crop_type_name]), 'error');
              return;
            }

            // If this crop is availables to create an crop entity.
            if ($entity->isNew()) {
              if ($properties['values']['crop_applied'] == '1' && isset($properties['values']) && (!empty($properties['values']['width']) && !empty($properties['values']['height']))) {
                // Get crop type for current cropType.
                if (!isset($crop_type) && empty($crop_type)) {
                  drupal_set_message(t("The type of crop does not exist, please check the configuration of the CropType ('@cropType')", ['@cropType' => $crop_type->label()]), 'error');
                  return;
                }

                $image_widget_crop_manager->applyCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
              }
            }
            else {
              // Get all imagesStyle used this crop_type.
              $image_styles = $image_widget_crop_manager->getImageStylesByCrop($crop_type_name);
              $crops = $image_widget_crop_manager->loadImageStyleByCrop($image_styles, $crop_type[$crop_type_name], $crop_element['file-uri']);
              // If the entity already exist & is not deleted by,
              // user update $crop_type_name crop entity.
              // If you need to delete existing crop when you edit this entity.
              if ($properties['values']['crop_applied'] == '0' && !empty($crops)) {
                $image_widget_crop_manager->deleteCrop($crop_element['file-uri'], $crop_type[$crop_type_name], $crop_element['file-id']);
              }
              elseif (isset($properties['values']) && (!empty($properties['values']['width']) && !empty($properties['values']['height']))) {
                $image_widget_crop_manager->updateCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function image_widget_crop_libraries_info() {
  $libraries = array(
    'cropper' => array(
      'name' => 'cropper',
      'vendor url' => 'https://github.com/fengyuanchen/cropper',
      'download url' => 'https://cdnjs.com/libraries/cropper',
      'version arguments' => array(
        'file' => 'cropper.min.js',
        'pattern' => '/Cropper v(.*)/',
        'lines' => 2,
      ),
      'files' => array(
        'js' => array(
          'cropper.min.js' => array(),
        ),
        'css' => array(
          'cropper.min.css' => array(),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function image_widget_crop_library_info_alter(&$libraries, $extension) {
  if ($extension != 'image_widget_crop') {
    return;
  }

  $config = \Drupal::config('image_widget_crop.settings');
  if (!\Drupal::moduleHandler()
      ->moduleExists('libraries') && !$config->get('settings.library_url') && !$config->get('settings.css_url')
  ) {
    $libraries['cropper.integration']['js'] = [];
  }

  // Get the correct path of the Cropper js file (the user needs to manually
  // put the jquery.cropper.min.js in libraries/cropper folder or set the url
  // in the settings).
  if ($library_url = $config->get('settings.library_url')) {
    // Cloud hosted library, use external JavaScript.
    $libraries['cropper']['js'][$library_url] = [
      'type' => 'external',
      'minified' => TRUE,
    ];
  }
  elseif (\Drupal::moduleHandler()->moduleExists('libraries')) {
    $info = libraries_detect('cropper');
    $libraries['cropper'] += [
      'version' => $info['installed'] ? $info['version'] : 'web-hosted',
    ];
    if ($info['installed']) {
      // Because the library is self hosted, use files from library definition.
      if (!empty($info['files']['js'])) {
        foreach ($info['files']['js'] as $data => $option) {

          if (is_numeric($data)) {
            $option = "/{$info['library path']}/{$option}";
          }
          elseif (empty($option['type']) || $option['type'] == 'file') {
            $data = "/{$info['library path']}/{$data}";
          }

          $libraries['cropper']['js'][$data] = $option;
        }
      }
    }
  }

  // Add the local CSS to the libraries.
  if ($css_url = $config->get('settings.css_url')) {
    // Cloud hosted library, use external CSS.
    $libraries['cropper']['css']['component'][$css_url] = [
      'type' => 'external',
      'minified' => TRUE,
    ];
  }
  elseif (\Drupal::moduleHandler()->moduleExists('libraries')) {
    $info = libraries_detect('cropper');
    $libraries['cropper'] += [
      'version' => $info['installed'] ? $info['version'] : 'web-hosted',
    ];
    if ($info['installed']) {
      // Because the library is self hosted, use files from library definition.
      if (!empty($info['files']['css'])) {
        foreach ($info['files']['css'] as $data => $option) {

          if (is_numeric($data)) {
            $option = "/{$info['library path']}/{$option}";
          }
          elseif (empty($option['type']) || $option['type'] == 'file') {
            $data = "/{$info['library path']}/{$data}";
          }

          $libraries['cropper']['css']['theme'][$data] = $option;
        }
      }
    }
  }
}

/**
 * Form submission handler for image_widget_crop_form_file_form_alter.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function image_widget_crop_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get old values.
  $old_values = $form_state->getValues();

  // Get values from js.
  $user_values = $form_state->getUserInput();

  $crop_types = $user_values['crop_preview_wrapper'];
  foreach ($crop_types as $crop_type_id => $crop_container) {
    $old_properties = $old_values['crop_preview_wrapper'][$crop_type_id]['crop_container']['values'];
    $new_properties = $user_values['crop_preview_wrapper'][$crop_type_id]['crop_container']['values'];

    // If we don't have old values and not creating new crop then simply
    // continue.
    if ($old_properties['edit'] == FALSE && $new_properties['crop_applied'] == 0) {
      continue;
    }

    $image_widget_crop_manager = \Drupal::service('image_widget_crop.manager');

    /** @var \Drupal\crop\Entity\CropType $crop_type */
    $crop_type = \Drupal::entityTypeManager()
      ->getStorage('crop_type')
      ->loadByProperties(['id' => $crop_type_id]);

    // If the crop type needed is disabled or delete.
    if (!isset($crop_type[$crop_type_id]) || empty($crop_type[$crop_type_id])) {
      drupal_set_message(t("The CropType ('@cropType') is not active or not defined. Please verify configuration of image style or ImageWidgetCrop formatter configuration", ['@cropType' => $crop_type['crop_type_name']]), 'error');
      return;
    }

    if ($old_properties['edit'] == FALSE && $new_properties['crop_applied'] == 1) {
      if (!isset($crop_type) && empty($crop_type)) {
        drupal_set_message(t("The type of crop does not exist, please check the configuration of the CropType ('@cropType')", ['@cropType' => $crop_type->label()]), 'error');
        return;
      }
      $image_widget_crop_manager->applyCrop($new_properties, $old_properties, $crop_type[$crop_type_id]);
    }

    // Get all imagesStyle used this crop_type.
    $image_styles = $image_widget_crop_manager->getImageStylesByCrop($crop_type_id);
    $crops = $image_widget_crop_manager->loadImageStyleByCrop($image_styles, $crop_type[$crop_type_id], $old_properties['file-uri']);

    if ($old_properties['edit'] == TRUE) {
      if ($new_properties['crop_applied'] == 1) {
        if ($image_widget_crop_manager->cropHasChanged($new_properties, $old_properties)) {
          $image_widget_crop_manager->updateCrop($new_properties, $old_properties, $crop_type[$crop_type_id]);
        }
      }
      elseif ($new_properties['crop_applied'] == 0 && !empty($crops)) {
        $image_widget_crop_manager->deleteCrop($old_properties['file-uri'], $crop_type[$crop_type_id], $old_properties['file-id']);
      }
    }

  }
}

/**
 * Implements hook_form_alter().
 */
function image_widget_crop_form_file_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\file_entity\Entity\FileEntity $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $mime_type = $entity->getMimeTypeType();
  $operation = $form_state->getFormObject()->getOperation();
  if ($mime_type == 'image' && ($operation == 'edit' || $operation == 'inline_edit')) {
    $edit = FALSE;

    // Display an error message if the local/remote library and CSS are not set.
    // @TODO Find a better solution to display the error message.
    $config = \Drupal::config('image_widget_crop.settings');
    $js_library = $config->get('settings.library_url');
    $css_library = $config->get('settings.css_url');
    if (!\Drupal::moduleHandler()->moduleExists('libraries')) {
      if ((empty($js_library) || empty($css_library)) || (empty($js_library) && empty($css_library))) {
        $form['message'] = array(
          '#type' => 'container',
          '#markup' => t('Either set the library locally (in /libraries/cropper) and enable the libraries module or enter the remote URL on <a href="/admin/config/media/crop-widget">Image Crop Widget settings</a>.'),
          '#attributes' => array(
            'class' => array('messages messages--error'),
          ),
        );
      }
    }
    $form['#theme'] = 'image_widget';
    $form['#attached']['library'][] = 'image/form';
    $form['#attached']['library'][] = 'image_widget_crop/cropper.integration';

    // Ensure that the ID of an element is unique.
    $list_id = \Drupal::service('uuid')->generate();
    $element_wrapper_name = 'crop_container';
    // Warn the user if the crop is used more than once.
    $usage_counter = 0;
    $file_usage = \Drupal::service('file.usage')->listUsage($entity);
    foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($file_usage)) as $usage) {
      $usage_counter += (int) $usage;
    }
    if ($usage_counter > 1) {
      $form['crop_reuse'] = [
        '#type' => 'container',
        '#markup' => t('This crop definition affects more usages of this image'),
        '#attributes' => [
          'class' => ['messages messages--warning'],
        ],
        '#weight' => -10,
      ];
    }
    // We need to wrap all elements to identify the widget elements.
    $form['crop_preview_wrapper'] = [
      '#type' => 'details',
      '#title' => t('Crop image'),
      '#attributes' => ['class' => ['image-widget-data__crop-wrapper']],
      '#weight' => 100,
      '#tree' => TRUE,
    ];

    $container = &$form['crop_preview_wrapper'];
    $container[$list_id] = [
      '#type' => 'vertical_tabs',
      '#default_tab' => '',
      '#theme_wrappers' => array('vertical_tabs'),
      '#tree' => TRUE,
      '#parents' => array($list_id),
    ];

    // Get all crop type available @TODO Get available crop type from configuration.
    $crop_type_list = \Drupal::service('entity_type.manager')
      ->getStorage('crop_type')
      ->loadMultiple();

    if (!empty($crop_type_list)) {
      foreach ($crop_type_list as $crop_type) {
        $crop_type_id = $crop_type->id();
        $label = $crop_type->label();

        $container[$crop_type_id] = [
          '#type' => 'details',
          '#title' => $label,
          '#group' => $list_id,
        ];

        $original_properties = [];

        $has_ratio = $crop_type->getAspectRatio();
        $ratio = !empty($has_ratio) ? $has_ratio : t('NaN');

        // Generation of html List with image & crop informations.
        $container[$crop_type_id][$element_wrapper_name] = [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['crop-preview-wrapper', $list_id],
            'id' => [$crop_type_id],
            'data-ratio' => [$ratio]
          ],
          '#weight' => -10,
        ];

        $file_uri = $entity->getFileUri();

        $container[$crop_type_id][$element_wrapper_name]['image'] = [
          '#theme' => 'image_style',
          // TODO Get from configuration.
          '#style_name' => 'crop_thumbnail',
          '#attributes' => [
            'class' => ['crop-preview-wrapper__preview-image'],
            'data-ratio' => $ratio,
            'data-name' => $crop_type_id,
            'data-original-width' => !empty($entity->getMetadata('width')) ? $entity->getMetadata('width') : '',
            'data-original-height' => !empty($entity->getMetadata('height')) ? $entity->getMetadata('height') : '',
          ],
          '#uri' => $file_uri,
          '#weight' => -10,
        ];

        $container[$crop_type_id][$element_wrapper_name]['reset'] = [
          '#type' => 'button',
          '#value' => t('Reset crop'),
          '#attributes' => ['class' => ['crop-preview-wrapper__crop-reset']],
          '#weight' => -10,
        ];

        // Generation of html List with image & crop information.
        $container[$crop_type_id][$element_wrapper_name]['values'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['crop-preview-wrapper__value']],
          '#weight' => -9,
        ];

        // Element to track whether cropping is applied or not.
        $container[$crop_type_id][$element_wrapper_name]['values']['crop_applied'] = [
          '#type' => 'hidden',
          '#attributes' => ['class' => ["crop-applied"]],
          '#value' => 0,
        ];

        $crop_storage = \Drupal::service('entity.manager')->getStorage('crop');

        // Get Only first crop entity,
        // @see https://www.drupal.org/node/2617818.
        /** @var \Drupal\crop\Entity\Crop $crop */
        $crop = current($crop_storage->loadByProperties([
          'type' => $crop_type_id,
          'uri' => $file_uri
        ]));
        // If there are no crops saved then we don't need to load crop values.
        if (!empty($crop)) {
          $original_properties = ImageCropWidget::getCropProperties($crop);

          /** @var \Drupal\Core\Image\Image $image */
          $image = \Drupal::service('image.factory')->get($file_uri);
          if (!$image->isValid()) {
            throw new \RuntimeException('This image file is nos valid');
          }

          // Element to track whether cropping is applied or not.
          $container[$crop_type_id][$element_wrapper_name]['values']['crop_applied']['#value'] = 1;
          $edit = TRUE;
        }

        ImageCropWidget::getCropFormElement($form, $element_wrapper_name, $original_properties, $edit, $crop_type_id);

        $container[$crop_type_id][$element_wrapper_name]['values']['edit'] = [
          '#type' => 'value',
          '#value' => $edit,
        ];

        // Stock Original File Values.
        $container[$crop_type_id][$element_wrapper_name]['values']['file-uri'] = [
          '#type' => 'value',
          '#value' => $file_uri,
        ];

        $container[$crop_type_id][$element_wrapper_name]['values']['file-id'] = [
          '#type' => 'value',
          '#value' => $entity->id(),
        ];
      }
    }
    $form['actions']['submit']['#submit'][] = 'image_widget_crop_form_submit';
  }
}
